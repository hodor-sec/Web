import java.io.*;
import java.io.IOException;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Filenames {
    // ADDED FOR CONSOLE LOGGING
    static Logger logger = Logger.getLogger(Filenames.class.getName());

    // MAIN FUNCTION CALLING FUNCTION3()
    public static void main(String[] args) throws Throwable {
        System.out.println("Running...");
        function3();
    }

    // FUNCTION3()
    public static void function3() throws Throwable {
        // Initializing string for storing data
        String data;
        data = "";

        // Setup a socket and stream readers
        Socket socket = null;
        BufferedReader readerBuffered = null;
        InputStreamReader readerInputStream = null;

        try {
            // Modified host to be able to test the vulnerability in a local lab
            socket = new Socket("192.168.252.13", 39544);
            readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
            readerBuffered = new BufferedReader(readerInputStream);
            data = readerBuffered.readLine();
        } catch (IOException exceptIO) {
            //IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            // ADDED LOGGER CODE
            logger.log(Level.WARNING, "Error with stream reading", exceptIO);
        } finally {
            // SNIPPED
        }

        // Set a directory path for serving files
        String root;
        root = "/var/www/uploads/";

        if (data != null) {
            System.out.format(data);

            // This is where a odd concatenation occurs:
            // Path is being concatenated with the contents of the variable "data"
            File file = new File(root + data);
            FileInputStream streamFileInputSink = null;
            InputStreamReader readerInputStreamSink = null;
            BufferedReader readerBufferedSink = null;
            if (file.exists() && file.isFile()) {
                try {
                    streamFileInputSink = new FileInputStream(file);
                    readerInputStreamSink = new InputStreamReader(streamFileInputSink, "UTF-8");
                    readerBufferedSink = new BufferedReader(readerInputStreamSink);

                    // Commented line is used by javax IO classes for servlets. Simply used TCP sockets as it
                    // already proves the vulnerability
                    //IO.writeLine(readerBufferedSink.readLine());

                    // BEGIN ADDED CODE
                    // Added code for better proving vulnerability and reading every line instead of just the first one
                    OutputStream output = socket.getOutputStream();
                    PrintWriter outputWriter = new PrintWriter(output, true);
                    while ((readerBufferedSink.readLine() != null)) {
                        outputWriter.println(readerBufferedSink.readLine());
                    };
                    // END ADDED CODE

                } catch (Throwable t) {
                    // ADDED LOGGER CODE
                    logger.log(Level.WARNING, "Error with stream reading", t);
                } finally {
                    // SNIPPED
                }
            }
        }

    }
}

